[{"title":"LLama2大模型量化部署","url":"/forward/1f77414f.html","content":"<h1 id=\"Llama模型量化模型cpp部署\"><a href=\"#Llama模型量化模型cpp部署\" class=\"headerlink\" title=\"Llama模型量化模型cpp部署\"></a>Llama模型量化模型cpp部署</h1><h2 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h2><p>wsl下部署没啥装个Ubuntu22.04先。</p>\n<p>然后git clone两个项目。</p>\n<p>首先是llama的git项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/facebookresearch/llama.git</span><br></pre></td></tr></table></figure>\n\n<p>然后是cpp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/ggerganov/llama.cpp.git</span><br></pre></td></tr></table></figure>\n\n<p>然后进入llama的项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> llama</span><br></pre></td></tr></table></figure>\n\n<p>然后去官网<a href=\"https://ai.meta.com/resources/models-and-libraries/llama-downloads/\">https://ai.meta.com/resources/models-and-libraries/llama-downloads/</a></p>\n<p>申请下载到邮箱</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./download.sh</span><br></pre></td></tr></table></figure>\n\n<p>然后就是这样子</p>\n<p><img src=\"/images/pasted-1.png\" alt=\"upload successful\"></p>\n<p>等待模型下载完毕以后，进入llama.cpp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> llama.cpp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>先安装gcc环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install build-essential</span><br></pre></td></tr></table></figure>\n\n<p>编译等待编译完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p>安装python依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>转换模型，当然还有其他参数我们可以直接打开convert.py去查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 convert.py <span class=\"string\">&#x27;模型地址&#x27;</span></span><br><span class=\"line\">python3 convert.py --outfile <span class=\"string\">&#x27;输出地址&#x27;</span> <span class=\"string\">&#x27;模型地址&#x27;</span></span><br><span class=\"line\">python3 convert.py --outfile ./models/llama-2-7b-chat ../llama/llama-2-7b-chat/</span><br></pre></td></tr></table></figure>\n\n<p>那么如果遇到以下问题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">```bash</span><br><span class=\"line\">python3 haConvert.py --outfile ./models/llama-2-7b-chat ../llama/llama-2-7b-chat/</span><br><span class=\"line\">```</span><br><span class=\"line\">```error</span><br><span class=\"line\">Writing models/llama-2-7b-chat, format 1</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xiaoyu/llama.cpp/haConvert.py&quot;</span>, line 1210, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    main()</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xiaoyu/llama.cpp/haConvert.py&quot;</span>, line 1205, <span class=\"keyword\">in</span> main</span><br><span class=\"line\">    OutputFile.write_all(outfile, ftype, params, model, vocab, special_vocab, concurrency = args.concurrency, endianess=endianess)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xiaoyu/llama.cpp/haConvert.py&quot;</span>, line 909, <span class=\"keyword\">in</span> write_all</span><br><span class=\"line\">    check_vocab_size(params, vocab)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/xiaoyu/llama.cpp/haConvert.py&quot;</span>, line 796, <span class=\"keyword\">in</span> check_vocab_size</span><br><span class=\"line\">    raise Exception(msg)</span><br><span class=\"line\">Exception: Vocab size mismatch (model has -1, but ../llama/tokenizer.model has 32000).</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>不要去相信网上的added_tokens.json</p>\n<p>实际上在llama-2-7b-chat文件夹中，应该有一个.json文件（可能是params.json）。打开这个json文件，将”vocab_size”从-1改为32000。</p>\n<p><img src=\"/images/pasted-0.png\" alt=\"upload successful\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>实际上最后输出的是一个.bin文件，所以我们上面的命令是有瑕疵的。</p>\n<p>所以当我们转换成功以后。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> models</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 7B</span><br><span class=\"line\"><span class=\"built_in\">mv</span> llama-2-7b-chat 7B/ggml-model-f16.bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"量化\"><a href=\"#量化\" class=\"headerlink\" title=\"量化\"></a>量化</h2><p>我们上面改为了bin这里也变成bin，我们执行的是4bit量化, 输出到./models/7B/目录下面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./quantize ./models/7B/ggml-model-f16.bin ./models/7B/ggml-model-q4_0.gguf q4_0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./main -m ./models/7B/ggml-model-q4_0.gguf -n 256 --repeat_penalty 1.0 --color -i -r <span class=\"string\">&quot;User:&quot;</span> -f prompts/chat-with-bob.txt</span><br></pre></td></tr></table></figure>","categories":["探索"],"tags":["大模型应用"]},{"title":"Hello World","url":"/forward/4a17b156.html","content":"<h2 id=\"失語時代下的喃喃自語\"><a href=\"#失語時代下的喃喃自語\" class=\"headerlink\" title=\"失語時代下的喃喃自語\"></a>失語時代下的喃喃自語</h2><p>纪念2017年愚人节，reddit网站发起一项为期三天的社会实验（2017年4月1日-4月3日），号召所有注册用户在一块100万像素的画布上作画（1000*1000），用户有16种像素颜色选择，生成一次后需要等待20分钟到5分钟之后才可以进行下一次编辑。凭借大家的协作创造出得一幅伟大的作品并载入互联网史册。</p>\n<p>在混乱中建立秩序，文明也在一次次破坏重建中焕发了新的面貌，当资源有限的情况下，一个群体想要生存势必要蚕食别的群体，生存还是毁灭的问题在短短的72小时内在一块小小的帆布画版上不断上演。虽然这个活动在几年前就已经结束了，但现实中比Reddit这场社会实验残酷百倍的故事却从未停歇。<br><del>国家之间的冲突，族群之间的恶意。在更大纬度的战场，渗透于各个领域的对垒，甚至已经关乎到十几亿几十亿人们的幸福生活。</del></p>\n<p>活动地址参见：<a href=\"https://www.reddit.com/r/place/\">reddit/r/place</a><br>活动详情参见：<a href=\"https://en.wikipedia.org/wiki/Place_(Reddit)\">维基百科</a><br>画板元素详解：<a href=\"https://draemm.li/various/place-atlas/\">The /r/place Atlas</a><br>变化过程参见：<a href=\"https://www.bilibili.com/video/BV1WW41197qY\">bilibil</a></p>\n<p>活动结束时最终快照[高清]：<br><img src=\"/images/img--1.png\" alt=\"reddit-place-2017\"></p>\n","tags":["place"]},{"title":"计算机硬件基础-cache-校验码","url":"/forward/20906a71.html","content":"<h1 id=\"计算机基础硬件-cache-校验码\"><a href=\"#计算机基础硬件-cache-校验码\" class=\"headerlink\" title=\"计算机基础硬件-cache + 校验码\"></a>计算机基础硬件-cache + 校验码</h1><h2 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h2><p>功能:提高cpu数据输入输出的速率，突破冯诺依曼瓶颈</p>\n<p>速度：在计算机存储体系中，cache是访问速度较快的层次</p>\n<p>原理: 在使用cache改善系统性能的一居室程序的局部性原理。</p>\n<p>组成：cache由控制部分和存储部分组成</p>\n<p><img src=\"/images/pasted-2.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-3.png\" alt=\"upload successful\"></p>\n<h2 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h2><p><img src=\"/images/pasted-4.png\" alt=\"upload successful\"></p>\n<h2 id=\"校验码-奇偶校验码-，CRC-海明校验码\"><a href=\"#校验码-奇偶校验码-，CRC-海明校验码\" class=\"headerlink\" title=\"校验码-奇偶校验码 ，CRC,海明校验码\"></a>校验码-奇偶校验码 ，CRC,海明校验码</h2><p><img src=\"/images/pasted-5.png\" alt=\"upload successful\"></p>\n<p>奇偶校验码 - 只能检错，可检验1（奇数）位错</p>\n<p>CRC - 只能检错，可检多位</p>\n<p>海明码：可以检错纠错，和1位多位</p>\n<p><img src=\"/images/pasted-6.png\" alt=\"upload successful\"><br>奇偶校验很简单比如：</p>\n<p><span style=\"color:red\">1</span>|00  0 这样子这个就有一个奇数校验</p>\n<p><span style=\"color:red\">0</span>|01      1</p>\n<p><span style=\"color:red\">0</span>|10      2</p>\n<p><span style=\"color:red\">1</span>|11      3</p>\n<p>假如出现一个 <span style=\"color:red\">0</span>|11 这种就在奇数校验下非法了</p>\n<p>CRC 就是k个数据位+r个校验位没啥好说的</p>\n<p>海明码假设由48个数据位</p>\n<p>那么由公式 2^k &gt;= 48 + k     得出k = 6 6个校验位</p>\n<p><img src=\"/images/pasted-7.png\" alt=\"upload successful\"></p>\n","categories":["日记"],"tags":["信息系统管理工程师"]},{"title":"计算机组成原理部分（基础词汇扫盲+基本组成）-软考版","url":"/forward/624a8c21.html","content":"<h1 id=\"计算机基本组成\"><a href=\"#计算机基本组成\" class=\"headerlink\" title=\"计算机基本组成\"></a>计算机基本组成</h1><p><img src=\"/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20240415190659207.png\" alt=\"image-20240415190659207\"></p>\n<h2 id=\"计算机基组成\"><a href=\"#计算机基组成\" class=\"headerlink\" title=\"计算机基组成\"></a>计算机基组成</h2><ol>\n<li>输入设备</li>\n<li>运算器 控制器 ==》 CPU （其实在这个阶段还有CPU+主存储器被称为主机）还有说法就是CPU其实应该分为（运算器，寄存器组，控制器，内部总线）</li>\n<li>存储器</li>\n<li>输出设备</li>\n</ol>\n<p>其中比较值得记忆的就是<code>运算器</code>和<code>控制器</code></p>\n<h3 id=\"运算器\"><a href=\"#运算器\" class=\"headerlink\" title=\"运算器\"></a>运算器</h3><table>\n<thead>\n<tr>\n<th>模块</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算数逻辑单元ALU</td>\n<td>进行算式计算和逻辑运算</td>\n</tr>\n<tr>\n<td>累加寄存器（有的设备没有累加寄存器直接用<code>数据缓冲寄存器替代</code>）</td>\n<td>存放数据运算的一个操作数或者结果如31+1=32中的32.也有可能是其中的31。因为它只能存一个。</td>\n</tr>\n<tr>\n<td>数据缓冲寄存器</td>\n<td>保存cpu的运算数和运算结果。<code>这个存的多一些</code></td>\n</tr>\n<tr>\n<td>状态条件寄存器</td>\n<td>在计算机中，它主要用来保存运算过程中的状态信息，比如运算结果、运算过程中的逻辑状态等。当运算出现异区状态时，它能够及时标识出来，帮助计算机更好地进行下一步的运算。</td>\n</tr>\n</tbody></table>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><table>\n<thead>\n<tr>\n<th>模块</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>程序计数器PC</td>\n<td>用于记录下一个需要运行的指令。</td>\n</tr>\n<tr>\n<td>指令寄存器IR</td>\n<td>存放当前运行的任务指令</td>\n</tr>\n<tr>\n<td>指令译码器</td>\n<td>将指令译码为计算机能执行内容</td>\n</tr>\n<tr>\n<td>时序部件</td>\n<td>实际上就是控制cpu 频率的</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20240415191622335.png\" alt=\"image-20240415191622335\"></p>\n<h2 id=\"并发并行\"><a href=\"#并发并行\" class=\"headerlink\" title=\"并发并行\"></a>并发并行</h2><h3 id=\"并发性\"><a href=\"#并发性\" class=\"headerlink\" title=\"并发性\"></a>并发性</h3><p>并发就是一时间段内运行的任务。</p>\n<h3 id=\"同时性\"><a href=\"#同时性\" class=\"headerlink\" title=\"同时性\"></a>同时性</h3><p>就是同一时刻。</p>\n<h2 id=\"词汇扫盲\"><a href=\"#词汇扫盲\" class=\"headerlink\" title=\"词汇扫盲\"></a>词汇扫盲</h2><p><img src=\"/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20240415191807006.png\" alt=\"image-20240415191807006\"></p>\n<h3 id=\"CPU的性能指标\"><a href=\"#CPU的性能指标\" class=\"headerlink\" title=\"CPU的性能指标\"></a>CPU的性能指标</h3><p>主频就是2.4GHZ这个，</p>\n<p>字长就是一次性能处理的2进制数据长度，如2^64    2^32这样子</p>\n<p>CPU缓存就是L1 L2高速缓存。</p>\n<h3 id=\"总线分类\"><a href=\"#总线分类\" class=\"headerlink\" title=\"总线分类\"></a>总线分类</h3><ul>\n<li>数据总线：顾名思义数据走向的总线。</li>\n<li>控制总线：控制指令总线</li>\n<li>地址总线：内存编址范围。（一般XP系统内存是4G，因为xp的操作系统内存编址是32位 2^32 = 2^2 * 2^30  然后 2^30是一个G，所以算下来就是4G）总之就是管理操作系统运行内存大小</li>\n</ul>\n<p>总线性能：带宽（这个就是是带宽），位宽（一般就是和CPU字长一样，32位就是32位），工作频率（时序频率）</p>\n<p>设备间连接方式：串行连接，和并行连接。 串行线只有一根但是可以很长，并行线可以有多根但是不能很长。前者速度慢但是距离长，后者速度快距离短。</p>\n","categories":["日记"],"tags":["信息系统管理工程师"]},{"title":"计算机组成原理指令存储-软考版","url":"/forward/8f372709.html","content":"<h1 id=\"指令-存储软考版本\"><a href=\"#指令-存储软考版本\" class=\"headerlink\" title=\"指令+存储软考版本\"></a>指令+存储软考版本</h1><h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p><strong>一条指令就是机器语言的一个语句，是一组有意义的二进制代码</strong></p>\n<p>一条指令其实包含如下内容：”操作码字段” ，”地址码字段”</p>\n<ul>\n<li>操作码字段 - 指出计算机要执行什么性质的操作。</li>\n<li>地址码字段 - 包含各操作数的地址与结果存放地址。</li>\n</ul>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240417225856055.png\" alt=\"image-20240417225856055\"></p>\n<p>如果没有A1 A2 A3只有OP就是0地址指令符</p>\n<h2 id=\"寻址方式\"><a href=\"#寻址方式\" class=\"headerlink\" title=\"寻址方式\"></a>寻址方式</h2><ul>\n<li><p>立即寻址：地址码部分存放的就是操作数</p>\n</li>\n<li><p>直接寻址：地址码存放的是操作数的地址</p>\n</li>\n<li><p>间接寻址：地址码存放的是记录操作数地址的地址。</p>\n</li>\n<li><p>寄存器寻址：地址码部分告诉我们数据存在哪一个寄存器</p>\n</li>\n<li><p>寄存器间接寻址：数据存在哪一个寄存器的地址</p>\n</li>\n<li><p>———————–上面软考常考</p>\n</li>\n<li><p>下面这三个基本上就是加偏移量进行寻址</p>\n</li>\n<li><p>相对寻址-一般个电脑就这个</p>\n</li>\n<li><p>基址寻址</p>\n</li>\n<li><p>变址寻址</p>\n</li>\n</ul>\n<h2 id=\"计算机体系结构分类\"><a href=\"#计算机体系结构分类\" class=\"headerlink\" title=\"计算机体系结构分类\"></a>计算机体系结构分类</h2><table>\n<thead>\n<tr>\n<th>体系结构类型</th>\n<th>结构</th>\n<th>关键特性</th>\n<th>代表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单指令流，单数据流，<strong>SISD</strong></td>\n<td>控制部分：1<br />处理部件：1</td>\n<td></td>\n<td>单处理器系统</td>\n</tr>\n<tr>\n<td>单指令流，多数据流 <strong>SIMD</strong></td>\n<td>控制部分：1<br />处理部件：多个</td>\n<td>以同步的形式执行同一条指令</td>\n<td>阵列处理机，超级向量处理机</td>\n</tr>\n<tr>\n<td>多指令流，单数据流 <strong>MISD</strong></td>\n<td>控制部分：多个<br />处理部分：1</td>\n<td>不可能且不实际</td>\n<td>目前没有，有点像流水线之类的<br /></td>\n</tr>\n<tr>\n<td>多指令流，多数据流<br /><strong>MSMD</strong></td>\n<td>控制部分：多个<br />处理部分：多个</td>\n<td>能够实现作业任务，指令等各级全面执行</td>\n<td>多处理机系统，多计算机</td>\n</tr>\n</tbody></table>\n<p>阵列处理机：就是多台处理机组成，每台处理机处理相同任务，并行计算。</p>\n<p>多处理机系统：多台处理机设备组成的系统，每台处理机有属于自己的控制部件，可以执行独立的程序，共享一个主存储和所有外部设备。</p>\n<p><img src=\".//images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240418203026838.png\" alt=\"image-20240418203026838\"></p>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240424011317032.png\" alt=\"image-20240424011317032\"></p>\n<h2 id=\"CISC-与-RISC\"><a href=\"#CISC-与-RISC\" class=\"headerlink\" title=\"CISC 与 RISC\"></a>CISC 与 RISC</h2><table>\n<thead>\n<tr>\n<th>–</th>\n<th>CISC（复杂）</th>\n<th>RISC(精简)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>指令</td>\n<td>数量多，使用频率差别大，可变长格式</td>\n<td>数量少<br />使用频率接近<br />定长格式<br />大部分为单周期指令<br />操作寄存器<br />只有Load/Store操作内存</td>\n</tr>\n<tr>\n<td>寻址方式</td>\n<td>支持多种</td>\n<td>支持方式少</td>\n</tr>\n<tr>\n<td>实现方式</td>\n<td>微程序控制技术</td>\n<td>增加了通用寄存器<br />硬布线逻辑控制为主<br />采用流水线<br /></td>\n</tr>\n<tr>\n<td>其他</td>\n<td></td>\n<td>优化编译，有效支持高级语言</td>\n</tr>\n</tbody></table>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240424011820711.png\" alt=\"image-20240424011820711\"></p>\n<h2 id=\"流水线\"><a href=\"#流水线\" class=\"headerlink\" title=\"流水线\"></a>流水线</h2><p>流水线：多条指令重叠进行操作的一种准并行处理实现技术。</p>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240424011930035.png\" alt=\"image-20240424011930035\"></p>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240424011938087.png\" alt=\"image-20240424011938087\"></p>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240424012012622.png\" alt=\"image-20240424012012622\"></p>\n<p>上面这个图是不是一下子看不懂？</p>\n<p>根据列题来说，流水线周期其实就是，三部分执行时间中最长的一部分，在如题中也就是2ns。</p>\n<p>那么流水线计算公式呢？</p>\n<p><em><em>单条指令所需时间+（n-1）</em> 流水线周期</em>*</p>\n<p>那么如题就是</p>\n<p>（2+2+1）+ 99 * 2 = 203</p>\n<h2 id=\"多级存储器结构\"><a href=\"#多级存储器结构\" class=\"headerlink\" title=\"多级存储器结构\"></a>多级存储器结构</h2><p>没啥好说的，看图即可，金字塔上面 贵和快和小。下面就是便宜慢和大</p>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240418223757692.png\" alt=\"image-20240418223757692\"></p>\n<h2 id=\"存储器分类\"><a href=\"#存储器分类\" class=\"headerlink\" title=\"存储器分类\"></a>存储器分类</h2><p>一般就纠结一些</p>\n<p><img src=\"/images/%E6%8C%87%E4%BB%A4+%E5%AD%98%E5%82%A8-%E8%BD%AF%E8%80%83%E7%89%88.assets/image-20240418223824672.png\" alt=\"image-20240418223824672\"></p>\n","categories":["日记"],"tags":["信息系统管理工程师"]},{"title":"iterm2常用快捷键","url":"/forward/10883bf2.html","content":"<h1 id=\"Iterm2-常用快捷键\"><a href=\"#Iterm2-常用快捷键\" class=\"headerlink\" title=\"Iterm2 常用快捷键\"></a>Iterm2 常用快捷键</h1><p><img src=\"/images/iterm2%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.assets/image-20240429133734551.png\" alt=\"image-20240429133734551\"></p>\n<h2 id=\"标签控制\"><a href=\"#标签控制\" class=\"headerlink\" title=\"标签控制\"></a>标签控制</h2><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">新建标签：command + t</span><br><span class=\"line\"></span><br><span class=\"line\">关闭标签：command + w</span><br><span class=\"line\"></span><br><span class=\"line\">切换标签：command + 数字 command + 左右方向键</span><br><span class=\"line\"></span><br><span class=\"line\">切换全屏：command + enter</span><br><span class=\"line\"></span><br><span class=\"line\">查找：command + f</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分屏控制\"><a href=\"#分屏控制\" class=\"headerlink\" title=\"分屏控制\"></a>分屏控制</h2><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">垂直分屏：command + d</span><br><span class=\"line\"></span><br><span class=\"line\">水平分屏：command + shift + d</span><br><span class=\"line\"></span><br><span class=\"line\">切换屏幕：command + option + 方向键 command + [ 或 command + ]</span><br><span class=\"line\"></span><br><span class=\"line\">查看历史命令：command + ;</span><br><span class=\"line\"></span><br><span class=\"line\">查看剪贴板历史：command + shift + h</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"光标操作（常用）\"><a href=\"#光标操作（常用）\" class=\"headerlink\" title=\"光标操作（常用）\"></a>光标操作（常用）</h2><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">清除当前行（实际上是光标前全部内容）：ctrl + u</span><br><span class=\"line\"></span><br><span class=\"line\">删除前一个字符|删除后一个字符：ctrl + h | ctrl + h</span><br><span class=\"line\"></span><br><span class=\"line\">按单词往前删除（推荐记忆）：ctrl + w</span><br><span class=\"line\"></span><br><span class=\"line\">删除光标后所有内容：ctrl + k</span><br><span class=\"line\"></span><br><span class=\"line\">到行首（尾）：ctrl + a/e</span><br><span class=\"line\"></span><br><span class=\"line\">光标前进后退：-&gt; ctrl + f | &lt;- ctrl + b</span><br><span class=\"line\"></span><br><span class=\"line\">上一条命令|下一条命令：ctrl + p/n</span><br><span class=\"line\"></span><br><span class=\"line\">可以搜索的历史命令：ctrl + r</span><br><span class=\"line\"></span><br><span class=\"line\">清屏：command + r | ctrl + l | 我自己一般手动clear</span><br></pre></td></tr></table></figure>\n\n\n\n<p>上面就是我整理的一些快捷键。</p>\n<p>下面就是大整合：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">新建标签：<span class=\"built_in\">command</span> + t</span><br><span class=\"line\"></span><br><span class=\"line\">关闭标签：<span class=\"built_in\">command</span> + w</span><br><span class=\"line\"></span><br><span class=\"line\">切换标签：<span class=\"built_in\">command</span> + 数字 <span class=\"built_in\">command</span> + 左右方向键</span><br><span class=\"line\"></span><br><span class=\"line\">切换全屏：<span class=\"built_in\">command</span> + enter</span><br><span class=\"line\"></span><br><span class=\"line\">查找：<span class=\"built_in\">command</span> + f</span><br><span class=\"line\"></span><br><span class=\"line\">垂直分屏：<span class=\"built_in\">command</span> + d</span><br><span class=\"line\"></span><br><span class=\"line\">水平分屏：<span class=\"built_in\">command</span> + <span class=\"built_in\">shift</span> + d</span><br><span class=\"line\"></span><br><span class=\"line\">切换屏幕：<span class=\"built_in\">command</span> + option + 方向键 <span class=\"built_in\">command</span> + [ 或 <span class=\"built_in\">command</span> + ]</span><br><span class=\"line\"></span><br><span class=\"line\">查看历史命令：<span class=\"built_in\">command</span> + ;</span><br><span class=\"line\"></span><br><span class=\"line\">查看剪贴板历史：<span class=\"built_in\">command</span> + <span class=\"built_in\">shift</span> + h</span><br><span class=\"line\"></span><br><span class=\"line\">清除当前行：ctrl + u</span><br><span class=\"line\"></span><br><span class=\"line\">到行首：ctrl + a</span><br><span class=\"line\"></span><br><span class=\"line\">到行尾：ctrl + e</span><br><span class=\"line\"></span><br><span class=\"line\">前进后退：ctrl + f/b (相当于左右方向键)</span><br><span class=\"line\"></span><br><span class=\"line\">上一条命令：ctrl + p</span><br><span class=\"line\"></span><br><span class=\"line\">搜索命令历史：ctrl + r</span><br><span class=\"line\"></span><br><span class=\"line\">删除当前光标的字符：ctrl + d</span><br><span class=\"line\"></span><br><span class=\"line\">删除光标之前的字符：ctrl + h</span><br><span class=\"line\"></span><br><span class=\"line\">删除光标之前的单词：ctrl + w</span><br><span class=\"line\"></span><br><span class=\"line\">删除到文本末尾：ctrl + k</span><br><span class=\"line\"></span><br><span class=\"line\">交换光标处文本：ctrl + t</span><br><span class=\"line\"></span><br><span class=\"line\">清屏1：<span class=\"built_in\">command</span> + r</span><br><span class=\"line\"></span><br><span class=\"line\">清屏2：ctrl + l</span><br><span class=\"line\"></span><br><span class=\"line\">自带有哪些很实用的功能/快捷键</span><br><span class=\"line\"></span><br><span class=\"line\">⌘ + 数字在各 tab 标签直接来回切换</span><br><span class=\"line\"></span><br><span class=\"line\">选择即复制 + 鼠标中键粘贴，这个很实用</span><br><span class=\"line\"></span><br><span class=\"line\">⌘ + f 所查找的内容会被自动复制</span><br><span class=\"line\"></span><br><span class=\"line\">⌘ + d 横着分屏 / ⌘ + <span class=\"built_in\">shift</span> + d 竖着分屏</span><br><span class=\"line\"></span><br><span class=\"line\">⌘ + r = clear，而且只是换到新一屏，不会想 clear 一样创建一个空屏</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl + u 清空当前行，无论光标在什么位置</span><br><span class=\"line\"></span><br><span class=\"line\">输入开头命令后 按 ⌘ + ; 会自动列出输入过的命令</span><br><span class=\"line\"></span><br><span class=\"line\">⌘ + <span class=\"built_in\">shift</span> + h 会列出剪切板历史</span><br><span class=\"line\"></span><br><span class=\"line\">可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["折腾"],"tags":["MacOS终端"]}]